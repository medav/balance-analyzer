#!/usr/bin/env python

import sys

from model import *
from analyzer import *

def IsSat(statement):
    s = Solver()
    s.add(statement)
    issat = s.check() == sat
    if issat:
        return True, s.model()
    else:
        return False, None

def IsValid(statement):
    issat, model = IsSat(Not(statement))
    return not issat, model

a = Analyzer(sys.argv[1])

with open('before.dot', 'w') as f:
    a.DumpDot(f)
CompileDot('before.dot')

a.PostProcess()

with open('after.dot', 'w') as f:
    a.DumpDot(f)
CompileDot('after.dot')

val = a.CollectDataflow(a.exit, int(sys.argv[2]))

print('Symbolic dataflow value:')
for i in range(len(val)):
    print(' {} :'.format(i), val[i])

balance_cond = And(*[
    val[i] == val[i + 1]
    for i in range(len(val) - 1)
])

query = Implies(a.GenConstraints(), balance_cond)

print('==== Query ====')
print(query)
print('===============')

bal, unbal_model = IsValid(Implies(a.GenConstraints(), balance_cond))
unbal, bal_model = IsValid(Implies(a.GenConstraints(), Not(balance_cond)))

if bal:
    print('Always Balanced!')
elif unbal:
    print('Never Balanced!')
else:
    print('Could be unbalanced!')
    print('==== Unbalanced Model ====')
    print(unbal_model)
    print()
    print('==== Balanced Model ====')
    print(bal_model)
